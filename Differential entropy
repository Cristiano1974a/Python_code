# tested in python3.8
import math
import cmath
import os
import xml.etree.ElementTree as ET
import statistics

input_filename = "2021_07_09_test/1.svg"
segment_precision = 0.1
pdf_interval_size = 1 # (in degrees)

gnuplot_script = '''echo "
set term png size 500,1000 enhanced font 'Verdana,9'
set out '{basename}.png'
set datafile separator ','
set multiplot layout 3, 1
set title sprintf('Differential entropy: ({entropy} +/- {error}) nats')

unset key
set boxwidth {boxwidth}
set style fill solid
set yran [0:]
set xran [0:180]
set xlabel 'angle [degrees]'
set ylabel 'pdf'
plot 'pdf.tmp' using 1:2 w boxes

unset title
unset xran
unset yran
set xlabel '# of islands'
set ylabel 'entropy'
plot 'entropy.tmp' w linespoint lc rgb 'blue' lw 1 pt 7 pi -1 ps 1

set yran [*:*] reverse
set size ratio -1
set xlabel 'x'
set ylabel 'y'
plot 'polygon.tmp' using 1:2 w l lc rgb 'web-green' lw 3
" | gnuplot'''


def compute_entropy(unnormalized_pdf):
    s = 0
    for x in unnormalized_pdf:
        p = unnormalized_pdf[x] \
            / sum(unnormalized_pdf.values()) / pdf_interval_size
        s -= p * math.log(p) * pdf_interval_size
    return s


def write_pdf(filename, unnormalized_pdf):
    with open(filename, 'w') as f:
        for x in unnormalized_pdf:
            p = unnormalized_pdf[x] \
                / sum(unnormalized_pdf.values()) / pdf_interval_size
            f.write("%s, %s\n" % (x, p))


def main():
    # https://docs.python.org/3/library/xml.etree.elementtree.html
    tree = ET.parse(input_filename)
    root = tree.getroot()

    islands = []
    # iterate along all the tags in the svg file
    for x in root.iter():
        # processes the tags that ends in "path", which are paths
        if x.tag.endswith("path"):
            # still, a path can be divided into sub-paths, or individual islands
            p_inic = complex (0, 0)
            for y in x.get("d").replace("Z","z").split("z"):
                # if a sub-path is long enough,
                # it is added to the list of islands
                if(len(y) > 2):
                    new_island = Island(y, segment_precision, p_inic)
                    islands.append(new_island)
                    p_inic = new_island.p_final

    unnormalized_pdf = {}
    entropy_list = []

    for island in islands:
        # Adds all the angles of the island into the unnormalized_pdf
        unnormalized_pdf = island.add_to_unnormalized_pdf(unnormalized_pdf)

        s = compute_entropy(unnormalized_pdf)
        entropy_list.append(s)
        write_pdf("pdf.tmp", unnormalized_pdf)
        island.append_polygon_to_file("polygon.tmp")

    with open('entropy.tmp', 'w') as f:
        for entropy in entropy_list:
            f.write("%s\n" % entropy)

    error = statistics.pstdev(entropy_list)

    print ("%s, %s, %s\n" % (os.path.splitext(input_filename)[0], s, error))

    os.system(gnuplot_script.format( \
        entropy = round(s, 5), \
        error = round(error, 5), \
        basename = os.path.splitext(input_filename)[0], \
        boxwidth = pdf_interval_size \
        ).replace("\n", ";"))

    os.remove("polygon.tmp")
    os.remove("pdf.tmp")
    os.remove("entropy.tmp")


class Island:
    '''
    It mainly stores the polygon that describes the countour of an island and
    provides methods to compute the angles
    '''

    def __init__(self, path, precision, p_inic):
        '''
        Constructor.
        It imports the polygon from a SVG path string, and computes the
        centroid. It also updates the variable p_final, wich contains the
        coordinates of the last point.
        '''
        self.polygon = []
        self.p_final = self.import_SVG_path(path, p_inic, precision)
        self.centroid = self.find_centroid()


    def append_polygon_to_file(self, filename):
        '''
        Open the file in append mode and write the polygon vertices coordinates
        '''
        with open(filename, 'a') as f:
            for vertex in self.polygon:
                f.write("%s, %s\n" % (vertex.real, vertex.imag))
            f.write("\n")

    def length(self, index):
        '''
        Returns the length of a segment
        '''
        p0 = self.polygon[index]
        p1 = self.polygon[(index + 1) % len(self.polygon)]
        return abs(p1 - p0)


    def angle(self, index):
        '''
        Returns the angle (in degrees) between a segment of the polygon and a
        radial line.
        The radial line is defined by 2 points: the centroid of the polygon and
        the middle point of the segment of the polygon.
        '''
        p0 = self.polygon[index]    # initial point of segment i
        p1 = self.polygon[(index + 1) % len(self.polygon)] # final point
        middle_point = (p0 + p1) / 2        # middle point of the segment
        v0 = p1 - p0                        # vector defining the segment
        v1 = middle_point - self.centroid   # vector definin the radial line

        # The angle is computed base on the dot product of v1 and v2
        dot_product = (v0.real * v1.real) + (v0.imag * v1.imag)
        return math.acos(dot_product / abs(v0) / abs(v1)) / math.pi * 180


    def add_to_unnormalized_pdf(self, unnormalized_pdf):
        '''
        Adds all the angles to the unnormalized_pdf
        '''
        for i in range(len(self.polygon)):    # iterates all segments

            # computes the interval number
            n = round((self.angle(i) - 90) / pdf_interval_size) \
                * pdf_interval_size + 90

            # gets the current value stored in the interval, or 0 if empty
            old_value = unnormalized_pdf.get(n, 0)

            # the value of the interval is increase by the length of the segment
            unnormalized_pdf.update({n : old_value + self.length(i)})

        return unnormalized_pdf


    def find_centroid(self):
        '''
        Finds the centroid of a polygon. It uses the algorithm described in:
        https://en.wikipedia.org/wiki/Centroid
        '''
        cx = cy = area = 0
        for i in range (len(self.polygon)):
            p0 = self.polygon[i]
            p1 = self.polygon[(i + 1) % len(self.polygon)]

            cx += (p0.real + p1.real) \
                * (p0.real * p1.imag - p1.real * p0.imag)
            cy += (p0.imag + p1.imag) \
                * (p0.real * p1.imag - p1.real * p0.imag)

            area += p0.real * p1.imag - p1.real * p0.imag

        area /= 2
        return complex(cx, cy) / 6.0 / area


    def process_bezier(self, p0, p1, p2, p3, precision):
        '''
        Converts a cubic bezier curve into a polyline.
        Parameters:
            p0 ... p3: control points of a cubic bezier curve.
        https://en.wikipedia.org/wiki/B%C3%A9zier_curve#Cubic_B%C3%A9zier_curves

        Returns an estimation of the maximum length of a bezier curve.
        The idea to estimate the maximum length of the bezier curve is that
        the it is contained inside a box defined by the points p0, p1, p2, p3.
        https://en.wikipedia.org/wiki/B%C3%A9zier_curve#Higher-order_curves
        Therefore the length of the curve is:
        |p3-p0| < L < |p3-p2|+|p2-p1|+|p1-p0|
        '''

        max_length = abs(p3 - p2) + abs(p2 - p1) + abs(p1 - p0)
        steps = int(math.ceil(max_length / precision))
        dt = 1.0 / steps
        for i in range (steps):
            t = i * dt
            p = p0 * (1 - t) * (1 - t) * (1 - t) \
              + p1 * 3 * (1 - t) * (1 - t) * t \
              + p2 * 3 * (1 - t) * t * t \
              + p3 * t * t * t
            self.polygon.append(p)


    def process_line(self, p0, p1, precision):
        '''
        Converts a line into a polyline with segments of length "precision"
        '''
        steps = int(math.ceil(abs(p1 - p0) / precision))
        dt = 1.0 / steps
        for i in range (steps):
            t = i * dt
            p  = p0 * (1 - t) + p1 * t
            self.polygon.append(p)


    def import_SVG_path(self, path, p_inic, precision):
        '''
        It takes a string containing a path in SVG format and translate into a
        polygon.
        The SVG path shape comes in an string that contains a series of commands
        https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths
        '''
        self.polygon.clear()
        a = path.strip().replace(",", " ").split(" ")
        command = command_prev = ""
        i = 0
        while i < len(a):
            if a[i][0].isalpha():
                command = command_prev = a[i]
            else:
                command = command_prev
                i -= 1

            if command == "C":
                p0 = p_inic
                p1 = complex(float(a[i + 1]), float(a[i + 2]))
                p2 = complex(float(a[i + 3]), float(a[i + 4]))
                p3 = complex(float(a[i + 5]), float(a[i + 6]))
                self.process_bezier(p0, p1, p2, p3, precision)
                p_inic = p3
                i += 7

            elif command == "c":
                p0 = p_inic
                p1 = p_inic + complex(float(a[i + 1]), float(a[i + 2]))
                p2 = p_inic + complex(float(a[i + 3]), float(a[i + 4]))
                p3 = p_inic + complex(float(a[i + 5]), float(a[i + 6]))
                self.process_bezier(p0, p1, p2, p3, precision)
                p_inic = p3
                i += 7

            elif command == "L":
                p0 = p_inic
                p1 = complex(float(a[i + 1]), float(a[i + 2]))
                self.process_line(p0, p1, precision)
                p_inic = p1
                i += 3

            elif command == "l":
                p0 = p_inic
                p1 = p_inic + complex(float(a[i + 1]), float(a[i + 2]))
                self.process_line(p0, p1, precision)
                p_inic = p1
                i += 3

            elif command == "v":
                p0 = p_inic
                p1 = p_inic + complex(0, float(a[i + 1]))
                self.process_line(p0, p1, precision)
                p_inic = p1
                i += 2

            elif command == "V":
                p0 = p_inic
                p1 = complex(p_inic.real, float(a[i + 1]))
                self.process_line(p0, p1, precision)
                p_inic = p1
                i += 2

            elif command == "h":
                p0 = p_inic
                p1 = p_inic + complex(float(a[i + 1]), 0)
                self.process_line(p0, p1, precision)
                p_inic = p1
                i += 2

            elif command == "H":
                p0 = p_inic
                p1 = complex(float(a[i + 1]), p_inic.imag)
                self.process_line(p0, p1, precision)
                p_inic = p1
                i += 2

            elif command == "M":
                p_inic = complex(float(a[i + 1]), float(a[i + 2]))
                i += 3

            elif command == "m":
                p_inic += complex(float(a[i + 1]), float(a[i + 2]))
                i += 3

            else:
                print ("Error, SVG path command not supported: \""
                    + command
                    + "\"")
                exit (-1)
        return p_inic

    ############## class Island

if __name__ == "__main__":
    main()
